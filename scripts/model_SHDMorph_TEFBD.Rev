################################################
# Discretized morphological substitution model #
################################################
# Specify the number of categories we would like to use to describe our data. For simplicity,

n_cats = 3
n_max_states <- 7
idx = 1

# Draw the concentration parameter of the Dirichlet prior from an exponential hyperprior
dir_alpha ~ dnExponential(1)
moves.append( mvScale(dir_alpha, lambda=1, weight=1.0 ) )
moves.append( mvScale(dir_alpha, lambda=0.1, weight=3.0 ) )
moves.append( mvScale(dir_alpha, lambda=0.01, weight=5.0 ) )

for (i in 2:n_max_states) {
    morpho_bystate[i - 1] <- morpho
    morpho_bystate[i - 1].setNumStatesPartition(i)
    nc = morpho_bystate[i - 1].nchar()
    if (nc > 0) {
      pi_prior[idx] := rep(dir_alpha, i)

      for (j in 1:n_cats) {
          pi[idx][j] ~ dnDirichlet(pi_prior[idx])
          moves.append(mvSimplexElementScale(pi[idx][j], alpha=10, weight=1.0))

          # reverse the pi[idx][j] vector
          upper = pi[idx][j].size()
          for (k in 1:upper) {
              ind = upper + 1 - k
              rev_pi[idx][j][k] <- pi[idx][j][ind]
          }

          # make i-by-i rate matrix
          Q[idx][2*j - 1] := fnF81(pi[idx][j])
          # need to apply simplex() to convert rev_pi[idx][j] from type Probability[]
          Q[idx][2*j] := fnF81(simplex(rev_pi[idx][j]))
      }

      print("The mixture contains "+Q[idx].size()+" Q-matrices:")
      for (l in 1:Q[idx].size()) {
          print(" ")
          Q[idx][l]
      }

      mat_prior[idx] <- rep(1, 2*n_cats)
      matrix_probs[idx] ~ dnDirichlet(mat_prior[idx])

      moves.append( mvBetaSimplex(matrix_probs[idx], weight=3.0) )
      moves.append( mvDirichletSimplex(matrix_probs[idx], weight=1.5) )

      m_morph[idx] ~ dnPhyloCTMC(tree=phylogeny, siteRates=rates_morpho, Q=Q[idx],
                                 type="Standard", siteMatrices=matrix_probs[idx])
      m_morph[idx].clamp(morpho_bystate[i-1])

      idx = idx + 1
    }
}
